{"/home/travis/build/npmtest/node-npmtest-regression/test.js":"/* istanbul instrument in package npmtest_regression */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-regression/lib.npmtest_regression.js":"/* istanbul instrument in package npmtest_regression */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_regression = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_regression = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-regression/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-regression && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_regression */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_regression\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_regression.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_regression.rollup.js'] =\n            local.assetsDict['/assets.npmtest_regression.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_regression.__dirname + '/lib.npmtest_regression.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-regression/node_modules/regression/index.js":"module.exports = require('./src/regression');","/home/travis/build/npmtest/node-npmtest-regression/node_modules/regression/src/regression.js":"/**\n* @license\n*\n* Regression.JS - Regression functions for javascript\n* http://tom-alexander.github.com/regression-js/\n*\n* copyright(c) 2013 Tom Alexander\n* Licensed under the MIT license.\n*\n* @module regression - Least-squares regression functions for JavaScript\n**/\n\n/* global define */\n(function _umd(global, factory) {\n  var returned;\n  // UMD Format for exports. Works with all module systems: AMD/RequireJS, CommonJS, and global\n  // AMD\n  if (typeof define === 'function' && define.amd) {\n    returned = define('regression', factory);\n  } else if (typeof module !== 'undefined') {\n    returned = module.exports = factory();\n  } else {\n    returned = global.regression = factory();\n  }\n  return returned;\n})(this, function _regressionUmdFactory() {\n  'use strict';\n  var exports;\n\n  /**\n   * Determine the coefficient of determination (r^2) of a fit from the observations and predictions.\n   *\n   * @param {Array<Array<number>>} observations - Pairs of observed x-y values\n   * @param {Array<Array<number>>} predictions - Pairs of observed predicted x-y values\n   *\n   * @return {number} - The r^2 value, or NaN if one cannot be calculated.\n   */\n  function determinationCoefficient(observations, predictions) {\n    var sum = observations.reduce(function (accum, observation) { return accum + observation[1]; }, 0);\n    var mean = sum / observations.length;\n\n    // Sum of squares of differences from the mean in the dependent variable\n    var ssyy = observations.reduce(function (accum, observation) {\n      var diff = observation[1] - mean;\n      return accum + diff * diff;\n    }, 0);\n\n    // Sum of squares of resudulals\n    var sse = observations.reduce(function (accum, observation, ix) {\n      var prediction = predictions[ix];\n      var resid = observation[1] - prediction[1];\n      return accum + resid * resid;\n    }, 0);\n\n    // If ssyy is zero, r^2 is meaningless, so NaN is an appropriate answer.\n    return 1 - (sse / ssyy);\n  }\n\n  /**\n   * Determine the solution of a system of linear equations A * x = b using Gaussian elimination.\n   *\n   * @param {Array<Array<number>>} matrix - A 2-d matrix of data in row-major form [ A | b ]\n   * @param {number} order - How many degrees to solve for\n   *\n   * @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\n   */\n  function gaussianElimination(matrix, order) {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var maxrow = 0;\n    var tmp = 0;\n    var n = matrix.length - 1;\n    var coefficients = new Array(order);\n\n    for (i = 0; i < n; i++) {\n      maxrow = i;\n      for (j = i + 1; j < n; j++) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\n          maxrow = j;\n        }\n      }\n\n      for (k = i; k < n + 1; k++) {\n        tmp = matrix[k][i];\n        matrix[k][i] = matrix[k][maxrow];\n        matrix[k][maxrow] = tmp;\n      }\n\n      for (j = i + 1; j < n; j++) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; j--) {\n      tmp = 0;\n      for (k = j + 1; k < n; k++) {\n        tmp += matrix[k][j] * coefficients[k];\n      }\n\n      coefficients[j] = (matrix[n][j] - tmp) / matrix[j][j];\n    }\n\n    return coefficients;\n  }\n\n  /** Precision to use when displaying string form of equation */\n  var _DEFAULT_PRECISION = 2;\n\n  /**\n   * Round a number to a precision, specificed in number of decimal places\n   *\n   * @param {number} number - The number to round\n   * @param {number} precision - The number of decimal places to round to:\n   *                             > 0 means decimals, < 0 means powers of 10\n   *\n   *\n   * @return {numbr} - The number, rounded\n   */\n  function _round(number, precision) {\n    var factor = Math.pow(10, precision);\n    return Math.round(number * factor) / factor;\n  }\n\n  /**\n   * The set of all fitting methods\n   *\n   * @namespace\n   */\n  var methods = {\n    linear: function (data, _order, options) {\n      var sum = [0, 0, 0, 0, 0];\n      var results;\n      var gradient;\n      var intercept;\n      var len = data.length;\n\n      for (var n = 0; n < len; n++) {\n        if (data[n][1] !== null) {\n          sum[0] += data[n][0];\n          sum[1] += data[n][1];\n          sum[2] += data[n][0] * data[n][0];\n          sum[3] += data[n][0] * data[n][1];\n          sum[4] += data[n][1] * data[n][1];\n        }\n      }\n\n      gradient = (len * sum[3] - sum[0] * sum[1]) / (len  * sum[2] - sum[0] * sum[0]);\n      intercept = (sum[1] / len) - (gradient * sum[0]) / len;\n\n      results = data.map(function (xyPair) {\n        var x = xyPair[0];\n        return [x, gradient * x + intercept];\n      });\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: [gradient, intercept],\n        points: results,\n        string: 'y = ' + _round(gradient, options.precision) + 'x + ' + _round(intercept, options.precision),\n      };\n    },\n\n    linearthroughorigin: function (data, _order, options) {\n      var sum = [0, 0];\n      var gradient;\n      var results;\n\n      for (var n = 0; n < data.length; n++) {\n        if (data[n][1] !== null) {\n          sum[0] += data[n][0] * data[n][0]; // sumSqX\n          sum[1] += data[n][0] * data[n][1]; // sumXY\n        }\n      }\n\n      gradient = sum[1] / sum[0];\n\n      results = data.map(function (xyPair) {\n        var x = xyPair[0];\n        return [x, gradient * x];\n      });\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: [gradient],\n        points: results,\n        string: 'y = ' + _round(gradient, options.precision) + 'x',\n      };\n    },\n\n    exponential: function (data, _order, options) {\n      var sum = [0, 0, 0, 0, 0, 0];\n      var denominator;\n      var coeffA;\n      var coeffB;\n      var results;\n\n      for (var n = 0; n < data.length; n++) {\n        if (data[n][1] !== null) {\n          sum[0] += data[n][0];\n          sum[1] += data[n][1];\n          sum[2] += data[n][0] * data[n][0] * data[n][1];\n          sum[3] += data[n][1] * Math.log(data[n][1]);\n          sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\n          sum[5] += data[n][0] * data[n][1];\n        }\n      }\n\n      denominator = (sum[1] * sum[2] - sum[5] * sum[5]);\n      coeffA = Math.exp((sum[2] * sum[3] - sum[5] * sum[4]) / denominator);\n      coeffB = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;\n\n      results = data.map(function (xyPair) {\n        var x = xyPair[0];\n        return [x, coeffA * Math.exp(coeffB * x)];\n      });\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: [coeffA, coeffB],\n        points: results,\n        string: 'y = ' + _round(coeffA, options.precision) + 'e^(' + _round(coeffB, options.precision) + 'x)',\n      };\n    },\n\n    logarithmic: function (data, _order, options) {\n      var sum = [0, 0, 0, 0];\n      var coeffA;\n      var coeffB;\n      var results;\n      var len = data.length;\n\n      for (var n = 0; n < len; n++) {\n        if (data[n][1] !== null) {\n          sum[0] += Math.log(data[n][0]);\n          sum[1] += data[n][1] * Math.log(data[n][0]);\n          sum[2] += data[n][1];\n          sum[3] += Math.pow(Math.log(data[n][0]), 2);\n        }\n      }\n\n      coeffB = (len * sum[1] - sum[2] * sum[0]) / (len * sum[3] - sum[0] * sum[0]);\n      coeffA = (sum[2] - coeffB * sum[0]) / len;\n\n      results = data.map(function (xyPair) {\n        var x = xyPair[0];\n        return [x, coeffA + coeffB * Math.log(x)];\n      });\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: [coeffA, coeffB],\n        points: results,\n        string: 'y = ' + _round(coeffA, options.precision) + ' + ' + _round(coeffB, options.precision) + ' ln(x)',\n      };\n    },\n\n    power: function (data, _order, options) {\n      var sum = [0, 0, 0, 0];\n      var coeffA;\n      var coeffB;\n      var results;\n      var len = data.length;\n\n      for (var n = 0; n < len; n++) {\n        if (data[n][1] !== null) {\n          sum[0] += Math.log(data[n][0]);\n          sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\n          sum[2] += Math.log(data[n][1]);\n          sum[3] += Math.pow(Math.log(data[n][0]), 2);\n        }\n      }\n\n      coeffB = (len * sum[1] - sum[2] * sum[0]) / (len * sum[3] - sum[0] * sum[0]);\n      coeffA = Math.exp((sum[2] - coeffB * sum[0]) / len);\n\n      results = data.map(function (xyPair) {\n        var x = xyPair[0];\n        return [x, coeffA * Math.pow(x, coeffB)];\n      });\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: [coeffA, coeffB],\n        points: results,\n        string: 'y = ' + _round(coeffA, options.precision) + 'x^' + _round(coeffB, options.precision),\n      };\n    },\n\n    polynomial: function (data, order, options) {\n      var lhs = [];\n      var rhs = [];\n      var a = 0;\n      var b = 0;\n      var c;\n      var k;\n\n      var i;\n      var j;\n      var l;\n      var len = data.length;\n\n      var results;\n      var equation;\n      var string;\n\n      if (typeof order === 'undefined') {\n        k = 3;\n      } else {\n        k = order + 1;\n      }\n\n      for (i = 0; i < k; i++) {\n        for (l = 0; l < len; l++) {\n          if (data[l][1] !== null) {\n            a += Math.pow(data[l][0], i) * data[l][1];\n          }\n        }\n\n        lhs.push(a);\n        a = 0;\n\n        c = [];\n        for (j = 0; j < k; j++) {\n          for (l = 0; l < len; l++) {\n            if (data[l][1] !== null) {\n              b += Math.pow(data[l][0], i + j);\n            }\n          }\n          c.push(b);\n          b = 0;\n        }\n        rhs.push(c);\n      }\n      rhs.push(lhs);\n\n      equation = gaussianElimination(rhs, k);\n\n      results = data.map(function (xyPair) {\n        var x = xyPair[0];\n\n        var answer = equation.reduce(function (sum, coeff, power) {\n          return sum + coeff * Math.pow(x, power);\n        }, 0);\n\n        return [x, answer];\n      });\n\n      string = 'y = ';\n      for (i = equation.length - 1; i >= 0; i--) {\n        if (i > 1) {\n          string += _round(equation[i], options.precision)  + 'x^' + i + ' + ';\n        } else if (i === 1) {\n          string += _round(equation[i], options.precision) + 'x' + ' + ';\n        } else {\n          string += _round(equation[i], options.precision);\n        }\n      }\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: equation,\n        points: results,\n        string: string,\n      };\n    },\n\n    lastvalue: function (data, _order, options) {\n      var results = [];\n      var lastvalue = null;\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i][1] !== null && isFinite(data[i][1])) {\n          lastvalue = data[i][1];\n          results.push([data[i][0], data[i][1]]);\n        } else {\n          results.push([data[i][0], lastvalue]);\n        }\n      }\n\n      return {\n        r2: determinationCoefficient(data, results),\n        equation: [lastvalue],\n        points: results,\n        string: '' + _round(lastvalue, options.precision),\n      };\n    },\n  };\n\n  exports = function regression(method, data, order, options) {\n    var methodOptions = (\n      ((typeof order === 'object') && (typeof options === 'undefined'))\n        ? order\n        : options || {}\n    );\n\n    if (!methodOptions.precision) {\n      methodOptions.precision = _DEFAULT_PRECISION;\n    }\n\n    if (typeof method === 'string') {\n      return methods[method.toLowerCase()](data, order, methodOptions);\n    }\n    return null;\n  };\n\n  // Since we are redefining the \"exports\" object to a new function, we must return it here.\n  return exports;\n});\n","/home/travis/build/npmtest/node-npmtest-regression/node_modules/regression/Gruntfile.js":"module.exports = function (grunt) {\n  // Load the plugin that provides the \"uglify\" task.\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-mocha-test');\n  grunt.loadNpmTasks('grunt-eslint');\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: {\n        preserveComments: 'some',\n      },\n      build: {\n        src: 'src/regression.js',\n        dest: 'build/regression.min.js',\n      },\n    },\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n        },\n        src: ['tests/**/*.js'],\n      },\n    },\n    eslint: {\n      target: [\n        'src/**/*.js',\n        'tests/**/*.js',\n      ],\n    },\n  });\n\n  // Default task(s).\n  grunt.registerTask('default', ['eslint', 'uglify']);\n  grunt.registerTask('test', ['eslint', 'mochaTest']);\n};\n"}